/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ARefExp extends PExp
{
    private PExp _name_;
    private PExp _idx_;

    public ARefExp()
    {
        // Constructor
    }

    public ARefExp(
        @SuppressWarnings("hiding") PExp _name_,
        @SuppressWarnings("hiding") PExp _idx_)
    {
        // Constructor
        setName(_name_);

        setIdx(_idx_);

    }

    @Override
    public Object clone()
    {
        return new ARefExp(
            cloneNode(this._name_),
            cloneNode(this._idx_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARefExp(this);
    }

    public PExp getName()
    {
        return this._name_;
    }

    public void setName(PExp node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PExp getIdx()
    {
        return this._idx_;
    }

    public void setIdx(PExp node)
    {
        if(this._idx_ != null)
        {
            this._idx_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idx_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._idx_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._idx_ == child)
        {
            this._idx_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((PExp) newChild);
            return;
        }

        if(this._idx_ == oldChild)
        {
            setIdx((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
