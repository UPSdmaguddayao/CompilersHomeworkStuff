/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import minijava.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainClassDecl(AMainClassDecl node);
    void caseABaseClassDecl(ABaseClassDecl node);
    void caseASubClassDecl(ASubClassDecl node);
    void caseAVarDecl(AVarDecl node);
    void caseAMethod(AMethod node);
    void caseAFormal(AFormal node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseAIntArrayType(AIntArrayType node);
    void caseAUserType(AUserType node);
    void caseAReturnStmt(AReturnStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAPrintStmt(APrintStmt node);
    void caseAAsmtStmt(AAsmtStmt node);
    void caseAArrayAsmtStmt(AArrayAsmtStmt node);
    void caseAAndExp(AAndExp node);
    void caseALtExp(ALtExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseATimesExp(ATimesExp node);
    void caseANotExp(ANotExp node);
    void caseARefExp(ARefExp node);
    void caseALengthExp(ALengthExp node);
    void caseAMethodExp(AMethodExp node);
    void caseANumExp(ANumExp node);
    void caseAIdExp(AIdExp node);
    void caseATrueExp(ATrueExp node);
    void caseAFalseExp(AFalseExp node);
    void caseAThisExp(AThisExp node);
    void caseAAllocExp(AAllocExp node);
    void caseANewExp(ANewExp node);

    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTLt(TLt node);
    void caseTAsmt(TAsmt node);
    void caseTEquals(TEquals node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTDot(TDot node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTLbracket(TLbracket node);
    void caseTRbracket(TRbracket node);
    void caseTLbrace(TLbrace node);
    void caseTRbrace(TRbrace node);
    void caseTBoolean(TBoolean node);
    void caseTClas(TClas node);
    void caseTElse(TElse node);
    void caseTExtends(TExtends node);
    void caseTFalse(TFalse node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTLength(TLength node);
    void caseTMain(TMain node);
    void caseTNew(TNew node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTStatic(TStatic node);
    void caseTString(TString node);
    void caseTPrint(TPrint node);
    void caseTThis(TThis node);
    void caseTTrue(TTrue node);
    void caseTVoid(TVoid node);
    void caseTWhile(TWhile node);
    void caseTId(TId node);
    void caseTNum(TNum node);
    void caseTWhitespace(TWhitespace node);
    void caseTBlockComment(TBlockComment node);
    void caseTEolComment(TEolComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
