/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.parser;

import minijava.lexer.*;
import minijava.node.*;
import minijava.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramProg */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AMainClassdecl */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce ABase$Some1Otherclassdecl */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce ABase$None1Otherclassdecl */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce ASub$Some1Otherclassdecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ASub$None1Otherclassdecl */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ASomeMoreclassdecl */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AOneMoreclassdecl */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AOneClassdeclrest */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AManyClassdeclrest */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AVardeclareVardecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AOneMorevardec */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce AManyMorevardec */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce ASomeMoremethdec */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce ANoneMoremethdec */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce AOneMethodrest */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce AManyMethodrest */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AMethoddecl$Some1Methoddecl */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AMethoddecl$None1Methoddecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AOneFormal */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce ASomeFormallist */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce ANoneFormallist */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AOneFormalrest */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce AManyFormalrest */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce AIntarrayType */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce AIntType */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce AIdType */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list);
            }
            break;
            case 28: /* reduce AMorestmStm */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list);
            }
            break;
            case 29: /* reduce AIfStm */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list);
            }
            break;
            case 30: /* reduce AWhileStm */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce APrintStm */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AAssignStm */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce AAssignlistStm */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list);
            }
            break;
            case 34: /* reduce ASomeMorestm */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list);
            }
            break;
            case 35: /* reduce ANoneMorestm */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list);
            }
            break;
            case 36: /* reduce AOneStmrest */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list);
            }
            break;
            case 37: /* reduce AManyStmrest */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list);
            }
            break;
            case 38: /* reduce AAddExp */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list);
            }
            break;
            case 39: /* reduce ASubExp */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce AElseExp */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce ALengthExp */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce AIteminlistExp */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce AMethodExp */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce ANotExp */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list);
            }
            break;
            case 45: /* reduce ALessExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce AAndExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce AMultExpt */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list);
            }
            break;
            case 48: /* reduce ATerminalExpt */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce AIntegerlitExpf */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list);
            }
            break;
            case 50: /* reduce ATrueExpf */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list);
            }
            break;
            case 51: /* reduce AFalseExpf */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce AIdExpf */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce AThisExpf */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce ANewintlistExpf */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list);
            }
            break;
            case 55: /* reduce ANewidExpf */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list);
            }
            break;
            case 56: /* reduce AInheritexpExpf */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce ASomeExplist */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list);
            }
            break;
            case 58: /* reduce ANoneExplist */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list);
            }
            break;
            case 59: /* reduce ASingleExprest */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list);
            }
            break;
            case 60: /* reduce AMultipleExprest */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AMainClassdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        PStmt pstmtNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList15.get(0);

        pclassdeclNode1 = new AMainClassDecl(tidNode2, pstmtNode3);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ABase$Some1Otherclassdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ABase$None1Otherclassdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode3, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASub$Some1Otherclassdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode5, listNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASub$None1Otherclassdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASomeMoreclassdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode3.add(pclassdeclNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AOneMoreclassdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AOneClassdeclrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AManyClassdeclrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode3.add(pclassdeclNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVardeclareVardecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AOneMorevardec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
        }
	if(pvardeclNode1 != null)
	{
	  listNode4.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AManyMorevardec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
        }
        listNode4 = (LinkedList)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode5.add(pvardeclNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASomeMoremethdec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANoneMoremethdec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AOneMethodrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethod pmethodNode1;
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
	if(pmethodNode1 != null)
	{
	  listNode2.add(pmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AManyMethodrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PMethod pmethodNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pmethodNode1 != null)
	{
	  listNode3.add(pmethodNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AMethoddecl$Some1Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5, listNode7, listNode9);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMethoddecl$None1Methoddecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5, listNode6, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AOneFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidNode3);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASomeFormallist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ANoneFormallist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AOneFormalrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidNode3);
        }
	if(pformalNode1 != null)
	{
	  listNode4.add(pformalNode1);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AManyFormalrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        PFormal pformalNode1;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidNode3);
        }
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(pformalNode1 != null)
	{
	  listNode5.add(pformalNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABoolType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIntarrayType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntArrayType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AUserType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AMorestmStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmtNode1 = new ABlockStmt(listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIfStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        PStmt pstmtNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmtNode3 = (PStmt)nodeArrayList5.get(0);
        pstmtNode4 = (PStmt)nodeArrayList7.get(0);

        pstmtNode1 = new AIfStmt(pexpNode2, pstmtNode3, pstmtNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AWhileStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmtNode3 = (PStmt)nodeArrayList5.get(0);

        pstmtNode1 = new AWhileStmt(pexpNode2, pstmtNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce APrintStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new APrintStmt(pexpNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAssignStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new AAsmtStmt(tidNode2, pexpNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAssignlistStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);

        pstmtNode1 = new AArrayAsmtStmt(tidNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASomeMorestm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ANoneMorestm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AOneStmrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AManyStmrest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pstmtNode1 != null)
	{
	  listNode3.add(pstmtNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASubExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AElseExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ALengthExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpNode1 = new ALengthExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AIteminlistExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ARefExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMethodExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpNode1 = new AMethodExp(pexpNode2, tidNode3, listNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANotExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ALessExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultExpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ATimesExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ATerminalExpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIntegerlitExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pexpNode1 = new ANumExp(tnumNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ATrueExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ATrueExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AFalseExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AFalseExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AIdExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AThisExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AThisExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANewintlistExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new AAllocExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANewidExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pexpNode1 = new ANewExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AInheritexpExpf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ASomeExplist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANoneExplist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ASingleExprest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMultipleExprest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {36, SHIFT, 5}, },
			{{-1, ERROR, 2}, {38, ACCEPT, -1}, },
			{{-1, REDUCE, 7}, {18, SHIFT, 6}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 5}, {15, SHIFT, 9}, },
			{{-1, ERROR, 6}, {36, SHIFT, 10}, },
			{{-1, REDUCE, 8}, {18, SHIFT, 6}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 9}, {27, SHIFT, 12}, },
			{{-1, ERROR, 10}, {15, SHIFT, 13}, {20, SHIFT, 14}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 12}, {29, SHIFT, 15}, },
			{{-1, REDUCE, 14}, {17, SHIFT, 16}, {23, SHIFT, 17}, {27, SHIFT, 18}, {36, SHIFT, 19}, },
			{{-1, ERROR, 14}, {36, SHIFT, 25}, },
			{{-1, ERROR, 15}, {34, SHIFT, 26}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, {13, SHIFT, 27}, },
			{{-1, ERROR, 18}, {17, SHIFT, 16}, {23, SHIFT, 17}, {36, SHIFT, 19}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 14}, {17, SHIFT, 16}, {23, SHIFT, 17}, {27, SHIFT, 18}, {36, SHIFT, 19}, },
			{{-1, ERROR, 21}, {16, SHIFT, 31}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, {27, SHIFT, 18}, },
			{{-1, ERROR, 24}, {36, SHIFT, 33}, },
			{{-1, ERROR, 25}, {15, SHIFT, 34}, },
			{{-1, ERROR, 26}, {25, SHIFT, 35}, },
			{{-1, ERROR, 27}, {14, SHIFT, 36}, },
			{{-1, ERROR, 28}, {36, SHIFT, 37}, },
			{{-1, ERROR, 29}, {16, SHIFT, 38}, },
			{{-1, ERROR, 30}, {36, SHIFT, 39}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 33}, {9, SHIFT, 40}, },
			{{-1, REDUCE, 14}, {17, SHIFT, 16}, {23, SHIFT, 17}, {27, SHIFT, 18}, {36, SHIFT, 19}, },
			{{-1, ERROR, 35}, {11, SHIFT, 43}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 37}, {11, SHIFT, 44}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 39}, {9, SHIFT, 45}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 14}, {17, SHIFT, 16}, {23, SHIFT, 17}, {27, SHIFT, 18}, {36, SHIFT, 19}, },
			{{-1, ERROR, 42}, {16, SHIFT, 47}, },
			{{-1, ERROR, 43}, {30, SHIFT, 48}, },
			{{-1, REDUCE, 21}, {17, SHIFT, 16}, {23, SHIFT, 17}, {36, SHIFT, 19}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 46}, {16, SHIFT, 52}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 48}, {13, SHIFT, 53}, },
			{{-1, ERROR, 49}, {12, SHIFT, 54}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 51}, {36, SHIFT, 55}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 53}, {14, SHIFT, 56}, },
			{{-1, ERROR, 54}, {15, SHIFT, 57}, },
			{{-1, REDUCE, 22}, {8, SHIFT, 58}, },
			{{-1, ERROR, 56}, {36, SHIFT, 59}, },
			{{-1, REDUCE, 35}, {15, SHIFT, 60}, {17, SHIFT, 16}, {22, SHIFT, 61}, {23, SHIFT, 17}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 64}, },
			{{-1, ERROR, 58}, {17, SHIFT, 16}, {23, SHIFT, 17}, {36, SHIFT, 19}, },
			{{-1, ERROR, 59}, {12, SHIFT, 70}, },
			{{-1, REDUCE, 35}, {15, SHIFT, 60}, {22, SHIFT, 61}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 71}, },
			{{-1, ERROR, 61}, {11, SHIFT, 73}, },
			{{-1, ERROR, 62}, {11, SHIFT, 74}, },
			{{-1, ERROR, 63}, {11, SHIFT, 75}, },
			{{-1, REDUCE, 27}, {6, SHIFT, 76}, {13, SHIFT, 77}, },
			{{-1, REDUCE, 35}, {15, SHIFT, 60}, {17, SHIFT, 16}, {22, SHIFT, 61}, {23, SHIFT, 17}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 64}, },
			{{-1, REDUCE, 36}, {15, SHIFT, 60}, {22, SHIFT, 61}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 71}, },
			{{-1, ERROR, 67}, {28, SHIFT, 80}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 70}, {15, SHIFT, 81}, },
			{{-1, ERROR, 71}, {6, SHIFT, 76}, {13, SHIFT, 77}, },
			{{-1, ERROR, 72}, {16, SHIFT, 82}, },
			{{-1, ERROR, 73}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 74}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 75}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 76}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 77}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 78}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 80}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 81}, {15, SHIFT, 60}, {22, SHIFT, 61}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 71}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 84}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 86}, {23, SHIFT, 103}, {36, SHIFT, 104}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 91}, {0, SHIFT, 105}, {1, SHIFT, 106}, {10, SHIFT, 107}, {12, SHIFT, 108}, {13, SHIFT, 109}, },
			{{-1, REDUCE, 40}, {2, SHIFT, 110}, },
			{{-1, REDUCE, 48}, {4, SHIFT, 111}, {5, SHIFT, 112}, },
			{{-1, ERROR, 94}, {0, SHIFT, 105}, {1, SHIFT, 106}, {10, SHIFT, 107}, {12, SHIFT, 113}, {13, SHIFT, 109}, },
			{{-1, ERROR, 95}, {0, SHIFT, 105}, {1, SHIFT, 106}, {10, SHIFT, 107}, {12, SHIFT, 114}, {13, SHIFT, 109}, },
			{{-1, ERROR, 96}, {0, SHIFT, 105}, {1, SHIFT, 106}, {9, SHIFT, 115}, {10, SHIFT, 107}, {13, SHIFT, 109}, },
			{{-1, ERROR, 97}, {0, SHIFT, 105}, {1, SHIFT, 106}, {10, SHIFT, 107}, {13, SHIFT, 109}, {14, SHIFT, 116}, },
			{{-1, ERROR, 98}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 99}, {0, SHIFT, 105}, {1, SHIFT, 106}, {9, SHIFT, 118}, {10, SHIFT, 107}, {13, SHIFT, 109}, },
			{{-1, ERROR, 100}, {16, SHIFT, 119}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 102}, {0, SHIFT, 105}, {1, SHIFT, 106}, {10, SHIFT, 107}, {12, SHIFT, 120}, {13, SHIFT, 109}, },
			{{-1, ERROR, 103}, {13, SHIFT, 121}, },
			{{-1, ERROR, 104}, {11, SHIFT, 122}, },
			{{-1, ERROR, 105}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 106}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 107}, {24, SHIFT, 126}, {36, SHIFT, 127}, },
			{{-1, ERROR, 108}, {15, SHIFT, 60}, {22, SHIFT, 61}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 71}, },
			{{-1, ERROR, 109}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 110}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 111}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 112}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 113}, {9, SHIFT, 133}, },
			{{-1, ERROR, 114}, {15, SHIFT, 60}, {22, SHIFT, 61}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 71}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 116}, {6, SHIFT, 135}, },
			{{-1, ERROR, 117}, {0, SHIFT, 105}, {1, SHIFT, 106}, {9, SHIFT, 136}, {10, SHIFT, 107}, {13, SHIFT, 109}, },
			{{-1, ERROR, 118}, {16, SHIFT, 137}, },
			{{-1, ERROR, 119}, {16, SHIFT, 138}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 121}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 122}, {12, SHIFT, 140}, },
			{{-1, REDUCE, 38}, {2, SHIFT, 110}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 39}, {2, SHIFT, 110}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 127}, {11, SHIFT, 141}, },
			{{-1, ERROR, 128}, {19, SHIFT, 142}, },
			{{-1, ERROR, 129}, {0, SHIFT, 105}, {1, SHIFT, 106}, {10, SHIFT, 107}, {13, SHIFT, 109}, {14, SHIFT, 143}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 135}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 136}, {16, SHIFT, 145}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 139}, {0, SHIFT, 105}, {1, SHIFT, 106}, {10, SHIFT, 107}, {13, SHIFT, 109}, {14, SHIFT, 146}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 58}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, ERROR, 142}, {15, SHIFT, 60}, {22, SHIFT, 61}, {31, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 71}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 144}, {0, SHIFT, 105}, {1, SHIFT, 106}, {9, SHIFT, 151}, {10, SHIFT, 107}, {13, SHIFT, 109}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 59}, {0, SHIFT, 105}, {1, SHIFT, 106}, {8, SHIFT, 152}, {10, SHIFT, 107}, {13, SHIFT, 109}, },
			{{-1, ERROR, 148}, {12, SHIFT, 153}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 152}, {3, SHIFT, 83}, {11, SHIFT, 84}, {21, SHIFT, 85}, {26, SHIFT, 86}, {32, SHIFT, 87}, {33, SHIFT, 88}, {36, SHIFT, 89}, {37, SHIFT, 90}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 60}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 7}, },
			{{-1, 4}, },
			{{-1, 8}, {7, 11}, },
			{{-1, -1}, },
			{{-1, 20}, {34, 41}, {57, 65}, },
			{{-1, 21}, {20, 29}, {34, 42}, {41, 46}, },
			{{-1, 22}, {23, 32}, },
			{{-1, 23}, },
			{{-1, -1}, },
			{{-1, 49}, },
			{{-1, 50}, {58, 69}, },
			{{-1, 24}, {18, 28}, {20, 30}, {41, 30}, {44, 51}, {58, 51}, {65, 30}, },
			{{-1, 66}, {81, 100}, {108, 128}, {114, 134}, {142, 150}, },
			{{-1, 67}, {60, 72}, {65, 78}, },
			{{-1, 68}, {66, 79}, },
			{{-1, 147}, {73, 91}, {74, 94}, {75, 95}, {76, 96}, {77, 97}, {80, 99}, {84, 102}, {98, 117}, {109, 129}, {121, 139}, {135, 144}, },
			{{-1, 92}, {105, 123}, {106, 125}, },
			{{-1, 93}, {83, 101}, {105, 124}, {106, 124}, {110, 130}, {111, 131}, {112, 132}, },
			{{-1, 148}, },
			{{-1, 149}, {152, 154}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: '{', 'extends'",
			"expecting: 'static'",
			"expecting: '}', 'boolean', 'int', 'public', id",
			"expecting: 'void'",
			"expecting: '[', id",
			"expecting: 'boolean', 'int', id",
			"expecting: '}'",
			"expecting: '}', 'public'",
			"expecting: 'main'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: '('",
			"expecting: '{', '}', 'boolean', 'if', 'int', 'public', 'return', 'System.out.println', 'while', id",
			"expecting: 'String'",
			"expecting: ')', 'boolean', 'int', id",
			"expecting: '['",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: '{', 'boolean', 'if', 'int', 'return', 'System.out.println', 'while', id",
			"expecting: '{', '}', 'if', 'System.out.println', 'while', id",
			"expecting: '=', '[', id",
			"expecting: '{', '}', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: 'return'",
			"expecting: '}', 'return'",
			"expecting: '=', '['",
			"expecting: '!', '(', 'false', 'new', 'this', 'true', id, num",
			"expecting: '{', 'if', 'System.out.println', 'while', id",
			"expecting: '{', '}', 'else', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: '(', 'false', 'new', 'this', 'true', id, num",
			"expecting: '+', '-', '*', '&&', '<', ',', ';', '.', ')', '[', ']'",
			"expecting: 'int', id",
			"expecting: '+', '-', '.', ')', '['",
			"expecting: '+', '-', '*', ',', ';', '.', ')', '[', ']'",
			"expecting: '+', '-', ';', '.', '['",
			"expecting: '+', '-', '.', '[', ']'",
			"expecting: '+', '-', ',', ';', '.', ')', '[', ']'",
			"expecting: 'length', id",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: '!', '(', ')', 'false', 'new', 'this', 'true', id, num",
			"expecting: '+', '-', ',', '.', ')', '['",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 2, 4, 1, 3, 2, 5, 6, 2, 7, 8, 1, 9, 1, 10, 11, 1, 8, 12, 12, 13, 1, 4, 14, 15, 1, 12, 1, 3, 12, 16, 8, 17, 1, 17, 3, 16, 18, 8, 12, 19, 20, 18, 12, 3, 21, 22, 22, 1, 3, 15, 4, 23, 1, 24, 11, 22, 25, 17, 17, 17, 26, 24, 27, 28, 29, 22, 4, 30, 12, 31, 31, 31, 31, 31, 28, 29, 31, 32, 33, 34, 31, 35, 36, 35, 35, 35, 35, 37, 38, 35, 37, 37, 39, 40, 31, 39, 12, 41, 37, 21, 17, 34, 34, 42, 32, 31, 34, 34, 34, 16, 32, 33, 43, 39, 12, 12, 35, 31, 22, 38, 38, 38, 41, 17, 44, 40, 38, 41, 41, 33, 33, 31, 12, 13, 3, 40, 35, 45, 32, 41, 39, 13, 35, 46, 22, 22, 33, 33, 31, 41, 22, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
